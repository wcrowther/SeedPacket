
<div class="row">
    <div class="col-md-12">
        <h2>Extending</h2>
        <h3 class="byline">for SeedPacket version 2.0.7</h3>
        <h3>Overview</h3>
    </div>
</div>

<div class="row">
    <div class="col-md-12">
        <p>
            SeedPacket has been created from the beginning for extensibility. After all, the logic for data generation is contained
            in Rules that can be easily removed, replaced, or expanded. Individual Rules have access to a plethora of functionality that is
            passed in via dependency injection. The Generators are passed in as interfaces that can be easily switched out with new
            implementations, as can the DataSources and all the source data that popluates the DataSources, can be passed in as 
            an XML / JSON file or string.
        </p>
        <p>
            We are going to focus on two extensibility points, <b>Custom Extension Methods</b> and <b>Custom Generators</b>
        </p>
    </div>
</div>

<div class="row">
    <div class="col-md-6">
        <h3>Custom Extension Methods</h3>
        <p>
            This example shows a simple yet extremely powerful way to customize data generation for a whole project. The extension method
            overloads in the <b>SeedPacket.Extensions</b> for the main <b>.Seed()</b> methods have purposely been separated from the actual implementations
            in the SeedCore class in the root SeedPacket namespace. This means you can easily create your own custom implementation of <b>.Seed()</b>
            that just works everywhere in you project with your own Rules, defaults and data!         
        </p>
        <p>
            The actual code on this page is trivial as it just uses the customizations from the example <b>Extensions/CustomSeedExtensions.cs</b> 
            in this project. This a good starting point for your own custom extensions with default set to your own liking.
            It simplifies and removes some of the overloads from the <b>SeedPacket.Extensions</b> version, and set your defaults including
            that that we are getting our source data from our own XML file. Once you have your ideal solution, 
            you will find it generic enough that you will be able to take it to other projects to use for prototyping.
        </p>
        <p>
            One thing to note is that the namespace <b>Examples.Extensions</b> is imported into the page, but the <b>SeedPacket.Extensions</b>
            namespace is <b>NOT</b>. This allows our custom version(s) of .Seed() to work without namespace collisions. Another is that we are
            using a CustomGenerator that inherits from MultiGenerator. We will look at this a little later on the page.
        </p>
    </div>
    <div class="col-md-6">
        @{ Html.RenderPartial("_ExtendingExample1"); }
    </div>
</div>

<div class="row">
    <div class="col-md-6">
        <h3>SeedOne Extension Method</h3>
        <p>
            An additional method included in <b>Examples.Extensions</b> is <b>SeedOne()</b> which is implementation for just getting back
            a fully-populated single instance of the type. It is an extension on any class that implements the new() constructor
            (with no creation parameters).  While perhaps not the most efficient code, it shows how you can create alternative
            extensions that utilize SeedPacket code generation.
        </p>
    </div>
    <div class="col-md-6">
        @{ Html.RenderPartial("_ExtendingSeedOneExample"); }
    </div>
</div>

<div class="row">
    <div class="col-md-6">
        <h3>Custom Generators</h3>
        <p>
            Another extensibility point demonstrated in the <b>CustomSeedExension.cs</b> class is the custom IGenerator. The <b>CustomGenerator</b>
            inherits all functionality from the <b>MultiGenerator</b> and adds few new customizations. In this case, it adds a <b>RulesSet.Advanced</b>
            option as the default and adds some additional rules, including a Rule that fills the <b>CEO</b> property. Of course these could
            be more extensive, including a completely new default Rules implementation, etc.
        </p>
        <p>
            The <b>GetRules()</b> method of the <b>MultiGenerator</b> is declared as virtual so that it can be overriden by a derived class. 
            This method is called by the constructor to load its Rules collection based on the RulesSet enum that it is passed. So be overriding it, you can
            redefine which Rules are loaded for each enum. In fact, 3 values in the enum, Advanced, UnitTest, and Custom do not have an 
            implementation are there purely for customization in derived classes.
        </p>
        <p>
            Customizing multiple RuleSet implementations, gives you a centalized generator that can be used for unit testing by default and another that is for
            prototyping, etc. 
        </p>
    </div>
    <div class="col-md-6">
        @{ Html.RenderPartial("_ExtendingGeneratorExample"); }
    </div>
</div>

<div class="row">
    <div class="col-md-12">
        <a class="nextpage pull-right" href="/Rules">
            Rules<span class="glyphicon glyphicon-triangle-right" aria-hidden="true"></span>
        </a>
    </div>
</div>
