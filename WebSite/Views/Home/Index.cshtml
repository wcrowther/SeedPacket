
<div class="row">
    <div class="col-md-12">
        <img class="pull-right" style="margin: 20px 0;" src="~/Content/Images/SeedPacketImage.png" alt="SeedPacket Illustration" />
        <h2>SeedPacket 2.0</h2>
        <h3 class="byline">for rapid prototyping</h3>
        <p>Created by Will Crowther</p>
        <h3>Overview</h3>
        <p>
            SeedPacket is for quickly seeding data in .net for graphic mockups, Rapid Application Development (RAD), unit testing, 
            prototyping, data generation, database seeding, and unit testing. Written in C#, it is easy to use, with a customizable,
            and powerful rules engine that can pull data from an external source such as an Xml/Json file or string.
        </p>
        <h3>How It Works</h3>
        <p>
            Similar to a LINQ statement, SeedPacket adds a <b>.seed() extension method</b> onto IEnumerable that fills the list 
            with fully populated elements. The rules engine keys off the datatype or interface, and name of an item's properties
            so that the instance is filled with data that is appropriate to that type. That is to say, "out-of-the-box",
            email properties will be filled with valid emails, phone numbers filled with phone numbers, and names are names etc.
        </p>
        <p>By default, the rules engine loads up about 30 rules for common situations and will degrade to more generic 
            rules if necessary. If you need to modify the default generated data, the rules are simple to create and modify,
            and come with a many examples, including using a data generator that pulls from an external source. The randomly
            generated data can be set to always be static across requests or to be random for each time.
        </p>
    </div>
    <div class="col-md-8">
        <div class="hotBox">
            Install SeedPacket using the <b>Nuget Package Manager</b> in Visual Studio.<br />
            From the Package Manager Console type: <b>PM> Install-Package SeedPacket</b><br />
            For more details: <b><a href="https://www.nuget.org/packages/SeedPacket/2.0.6">https://www.nuget.org/packages/SeedPacket/2.0.6</a></b>  
        </div>
    </div>
</div>

<div class="row">
    <div class="col-md-6">
        <h3>Simple Examples</h3>
        <p>
            Creating seed data is as simple as importing SeedPacket from Nuget, adding the SeedPacket.Extensions namespace, and calling .Seed()
            on an existing an IEnumerable such as List, etc. The <b>table on the right</b> was generated the code in the second example below.
        </p>
        @{ Html.RenderPartial("_Example_SimpleExample");}
        <div class="randomSeed">
            Seed<input id="randomSeed" type="text" value="1234" maxlength="4" style="width:44px; text-align: center;" />
        </div>
        <div class="rowCounter">
            Rows<input id="numberOfRowResults" type="text" value="20" maxlength="4" style="width:44px; text-align: center;" />
        </div>
        <p>
            You can change the number of rows generated by changing the "rows" number to the right and the page will use javascript to fetch a new list of users
            generated by SeedPacket on the server. Note that even though the seed records are "randomly" generated, the list begins with the same results on subsequent
            iterations. This is because we are passing in the same random "seed" integer by default. Now change the "seed" number to the right and you
            will see that the generated data is always the same for a particular number.
        </p>
        <p>
            You will see how this can be easily customized when we update what data is generated with some custom rules in the Rules engine. The base data
            is taken from an embedded datasource, which can be easily overridden with an external XML / Json string or file.
        </p>
        <p>
            Notice how the seed data generated are well-formed usernames and email addresses. The default rules finds that the property type is a "string"
            and property contains "email" and "username" and generates the appropriate data, including generating the username from the firstname and lastname.
            Other data types such as the DateTime "Created" or an Int Id are also be created. The rules match first on data-type, then on match on property name
            with a last-added prioritization.
        </p>
        <p>
            What happens when you have a field name and/or datatype is not that common? Generally, the basic rules will catch common patterns and use
            a simple pattern such as the default of Property Name + the RowNumber for string. If there is not even a basic rule for a particular match,
            generally the type default is returned.
        </p>
        <p>
            <b>Of course, the real flexibility comes from being able to easily add your own custom rules. </b>We will get to that in the next section,
            but lets first look at a more advanced example.
        </p>
    </div>
    <div class="col-md-6">
        @{ Html.RenderPartial("_Result_SimpleExample"); }
        @{ Html.RenderPartial("_HotBox"); }
    </div>
</div>

<div class="row">
    <div class="col-md-12">

        @{ Html.RenderPartial("_Example_AdvancedExample"); }

        <h3>Advanced Example</h3>
        <p> 
            For more advanced situations, you can pass in a generator class that contains a customizable rules engine.  By default,  the "Advanced" ruleset is
            used which contains about thirty common rules and the data is loaded from an internal resource. In the example below a "MultiGenerator" is injected
            into the Seed method. We are adding five new rules to modify how the data is created.
        </p><p>
            The first rule applies to the "ItemName" field uses a built-in seedpacket function (Func) that gets the next element from the datasource list
            "ProductName". It actually overrides a rule that gets random (fake) products and replaces it with one that gets the next item in the sequence.
            This insures the values will all be unique, if the number of items requested is less than in the source.
        </p><p>
            The second rule, randomly picks a selected value for the dropdown from 0 to 10 (the C# Random() method picks values <i>less than</i> the max value).
        </p><p>
            The third rule, randomly picks a first and last name for any string fields matching "CEO"
        </p><p>
            The fourth rule, matches any string starting with "Description" and gets a random value from the datasoure called "Description". This is not in the 
            default lists that are "built-in" in SeedPacket. In the constructor for the MultiGenerator, you will see that we are now passing in a custom xml file
            that has all the source data for our lists. Now we have complete control of our source data and Funcs.RandomElement() can pull from any named element.
        </p><p>
            The fifth custom rule is the most interesting and makes sure that any List&lt;Item&gt; fields are filled from a generated list that has been saved in
            the generator's Cache. We can populate this generated list from another .Seed call and this allows us to have complex, hierarchical data when needed.
            Note how we can initially declare the rules, but then need to make sure we fill the cached data before the rules are actually run.
        </p><p>
            Lastly, notice how we are setting the BaseDateTime value. This can be used as the starting point for all DateTimes that we generate. We are also
            setting the BaseRandom value. This is the base of the "Random Tree" that all the other randoms such as the RowRandom property use as theire starting
            point. If we pass in a Random without a seed value, every call will generate different values. If we pass in a Random with a seed value, the data generated
            will always be the same. We can always pass in a different number seed number if we do not like the data that we get...</p>

        @{ Html.RenderPartial("_Result_AdvancedExample"); }
    </div>
</div>

<div class="row">
    <div class="col-md-12">
        <a class="nextpage pull-right" href="/Documentation">
            Documentation<span class="glyphicon glyphicon-triangle-right" aria-hidden="true"></span>
        </a>
    </div>
</div>

<script language="javascript" type="text/javascript">
    $(document).ready(function () {
        seedExamples.init();
    });
</script>



