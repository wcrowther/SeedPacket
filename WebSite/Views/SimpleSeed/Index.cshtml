
<div class="row">
    <div class="col-md-12">
        <h2>SimpleSeed</h2>
        <h3 class="byline">for rapid prototyping for LINQ in C#</h3>
        <p>Created by Will Crowther</p>
    </div>
</div>

<div class="row">
    <div class="col-md-12">
        <h3>Overview</h3>
        <p>
            <b>SimpleSeed</b> is a simple and direct approach to data generation that is a part of SeedPacket.  It provides a few extra tools
            to a Linq data generation workflow that can enhance quality of data simulation for mockups, unit testing, or when using "real" data is
            not appropriate. <b>SimpleSeed</b> provides two methods, <b>Inject</b> and <b>Randomize</b> that allow you to easily
            pull data from an external <b>Json or Xml data</b> source and apply it to your data. Let's get started by looking 
            at an example of how you may generate basic data using straight Linq, then we will move on to how SimpleSeed can be used 
            to enhance that data and make it more realistic.
        </p>
        <p>
            For information about the .Seed() method, please go the <a href="/">Home page</a>.
        </p>
    </div>
</div>

<div class="row">
    <div class="col-md-6">
        <h3>Generating Data With Linq</h3>
        <p>
            An easy and often overlooked method for generating data for mockups or testing is to use the <b>Linq Range</b> method
            paired with a <b>Select</b> method to succinctly create a list of objects. <b>Range</b> takes two parameters, an initial number,
            and the number of elements to create. We can use this capability to rapidly create a list of a particular type as 
            shown in the code below and the results to the right.
        </p>
        <p>
            While the generated data like this does the job for some situations, particularily for unit testing, it does not have a <i>"real world"</i>
            feel or the variety of real data. In our next section, we will look how SimpleSeed can be used to extend these techniques to take 
            this simple kind of data generation to a more sophisticated and useful level.
        </p>
        @{ Html.RenderPartial("_Example_LinqRange"); }
    </div>
    <div class="col-md-6" id="rowResults">
        @{ Html.RenderPartial("_Result_LinqRange"); }
    </div>
</div>

<div class="row">
    <div class="col-md-6">
        <h3>Generating Data With SimpleSeed</h3>
        <p>
            The code belows shows that we have added SeedPacket and are adding a <b>SimpleSeed</b> instance that points to
            the XML file <b>"~/SourceFiles/seedsource.xml"</b> in the root of the project. Using the .Inject() method,
            data matching the string in the XML will be injected into the results so that we have a much more
            <i>"real world"</i> feel to the data!
        </p>
        <p>
            The values returned are based on the ordinal that is passed into the loop, adjusted so that it falls into the
            range of the items in the XML. This means that the data will loop back when it runs out of new values.
            If the variety of output is too obviously repetitive, it is easy to add additional values to the seed data in the source.
        </p>
        <p>
            The source that is used to generate the seed data can be either JSON or XML and can be either a string or be loaded from a
            file. SimpleSeed default to an Auto source type that will attempt to indentify which source type is being supplied and adjust
            to that type. A type can also be expicitly specified and will fail if the source is incorrect. If valid source can be found,
            an internal dictionary of limited resources is used.
        </p>
        <p>
            SimpleSeed has another method called <b>.Randomize</b> that works like <b>.Inject</b> but get the values brought
            back using a c# Random call instead of sequentially. As the call uses a default seed value for the Random, the sequence
            of returned values will generally be the same unless you initialize a new seed value for the Random or change the size of
            elements that you are drawing from.
        </p>
        @{ Html.RenderPartial("_Example_UsingNext"); }
    </div>
    <div class="col-md-6" id="rowResults">
        @{ Html.RenderPartial("_Result_UsingNext"); }
    </div>
</div>
<div class="row">
    <div class="col-md-12">
        <a class="nextpage pull-right" href="/">
            Back to the Homepage<span class="glyphicon glyphicon-triangle-right" aria-hidden="true"></span>
        </a>
    </div>
</div>


