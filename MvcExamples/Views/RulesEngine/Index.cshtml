
<div class="row">
    <div class="col-md-12">
        <h2>Rules Engine</h2>
        <p>Customizing data creation for SeedPacket</p>
        <h3>Overview</h3>
        <p>
            SeedPacket is for the quick seeding of data on a List (or most types that implement IEnumerable). 
            It is easy to use out of the box for prototyping, data generation, and unit testing. It customizable
            with a powerful rules engine that can pull data from an external source such as an Xml file or string.
        </p>
        <h3>How It Works</h3>
        <p>
            SeedPacket adds a .seed() extension method onto IEnumerable so that you create a list of elements very easily. 
            The rules engine keys off the datatype or interface, and name of an item's properties so that the data is appropriate to the type.
            That is to say, "out-of-the-box" - email properties will be filled with valid emails, phone numbers filled with phone numbers,
            and names are names etc. By default, the rules engine loads up about 30 rules for common situations and will degrade to more generic 
            rules necessary. If you need to modify the default generated data, the rules are simple to create and modify,
            and come with a many examples, including a data generator that pulls from an xml file. The randomly generated data can be
            set to always be static or to be random on each request.
        </p>
    </div>
</div>

<div class="row">
    <div class="col-md-12">
        <h3>GenRules Parameters</h3>
        <ul>
            <li>
                <strong>BaseDateTime (DateTime)</strong>
                Serves as the basis for generated datetime data. If not set, currently defaults to 1/1/2018.
            </li>
            <li>
                <strong>BaseRandom (Random)</strong>
                Is a .net random number generator that serves as a basis for any random data. If not assigned, it uses a random with
                an int seed value of 123456. This generates the same sequence of "random" values over multiple iterations with can be useful.
                For instance, a web page that uses a seed() list will receive the same list each time it is called. To achieve a more "random"
                sequence for each time seed() is called pass in a new random(), without the seed int passed in.
            </li>
            <li>
                <strong>Generator (IGenerator)</strong>
                This is an IGenerator interface object that is injected into the method to generate data. By default, it uses the existing XmlDataGenerator class to create data but
                any IGenerator object can be used
            </li>
            <li>
                <strong>LoadRules (bool)</strong>
                If true, loads the rules from whatever DataGenerator is selected. Set to <b>false</b> when you would like to start with a completely empty set of GenRules.
                Defaults to <b>true</b>.
            </li>
        </ul>
    </div>
</div>

<div class="row">
    <div class="col-md-12">
        <h3>Managing Rules</h3>
        The GenRules class derives from Collection&lt;GenRule&gt;, so at the core it is a list of of GenRules that can be added to and deleted from.
        <ul>
            <li>
                <strong>Adding</strong>
                Information to come
            </li>
            <li>
                <strong>Replacing</strong>
                Information to come
            </li>
            <li>
                <strong>Deleting</strong>
                Information to come
            </li>
        </ul>
    </div>
</div>
<div class="row">
    <div class="col-md-12">
        <h3>Creating GenRules</h3>
        The GenRules class derives from Collection&lt;GenRule&gt;, so at the core it is a list of of GenRules that can be added to and deleted from.
        <ul>
            <li>
                <strong>Anatomy of a GenRule</strong>
                Information to come
            </li>
            <li>
                <strong>Matching on datatype or interface</strong>
                Information to come
            </li>
            <li>
                <strong>Matching on property name</strong>
                Information to come
            </li>
            <li>
                <strong>Caching</strong>
                Information to come
            </li>
        </ul>
    </div>
</div>

<div class="row">
    <div class="col-md-12">
        <h3>Debugging</h3>
        Information to come
    </div>
</div>
