
<div class="row">
    <div class="col-md-12">
        <h2>Documentation</h2>
        <p>SeedPacket version 2.01</p>
        <h3>Overview</h3>
    </div>
</div>

<div class="row">
    <div class="col-md-8">
        <p>
            TEXT TO COME
            SeedPacket is for the quick seeding of data on a List (or most types that implement IEnumerable).
            It is easy to use out of the box for prototyping, data generation, and unit testing. It customizable
            with a powerful rules engine that can pull data from an external source such as an Xml file or string.
        </p>
    </div>
    <div class="col-md-4">
        <div class="hotBox">
            The SeedPacket source code will be available on GitHub soon. Check back for a link.
        </div>
    </div>
</div>

<div class="row documentation">
    <div class="col-md-12">
        <h3>SeedPacket.Extensions Namespace</h3>
        <ul class="namespaceList">
            <li class="class">
                <h4>SeedExtensions static class</h4>
                <p><strong>Purpose:</strong>
                    This collection of static extension methods adds LINQ-like data generation onto many IEnumerable&lt;T&gt; implementations.
                    It is the main entry into SeedPacket .Seed() data generation and with 4 overloads for common scenarios. 
                    If the IGenerator is not specified, the MultiGenerator is used by default, and in turn it uses the MultiDataSource if 
                    not specified. The MultiDataSource loads its data from an embedded XML resource if an external source is not specified.
                </p>
                <p>Note that some classes that implement IEnumerable may not yet be supported. All implementations are constrained so
                   that the type T must implement new().</p>
                <strong>Extension Methods on IEnumerable&lt;T&gt;</strong>
                <ul>
                    <li>
                        <h5>.Seed (int seedBegin = 1, int seedEnd = 10, IGenerator generator = null) : returns IEnumerable&lt;T&gt;</h5>
                        <p>If no parameters are provided, creates 10 rows from 1 to 10. If IGenerator is null, defaults to the MultiGenerator.</p>
                    </li>
                    <li>
                        <h5>.Seed (int count) : returns IEnumerable&lt;T&gt;</h5>
                        <p>Seeds {count} rows of data using the MultiGenerator.</p>
                    </li>
                    <li>
                        <h5>.Seed (IGenerator generator) : returns IEnumerable&lt;T&gt;</h5>
                        <p>Seeds rows totally based on the IGenerator and its parameters that is passed in.</p>
                    </li>
                    <li>
                        <h5>.Seed (int seedBegin, int seedEnd, string filePath) : returns IEnumerable&lt;T&gt;</h5>
                        <p>Seeds rows beginning with {SeedBegin} to {SeedEnd}, passing in the path to an external file of data, either
                        XML or JSON (which it will automatically detect).</p>
                    </li>
                </ul>
            </li>
            @{ Html.RenderPartial("_01_SeedExtensions"); }
        </ul>
    </div>
</div>

<div class="row documentation">
    <div class="col-md-12">
        <h3>SeedPacket Namespace</h3>
        <ul class="namespaceList">
            <li class="class">
                <h4>SeedCore class</h4>
                <p><strong>Purpose:</strong>
                    As it's name suggests, the SeedCore class is the heart of SeedPacket data generation and is responsible for taking
                    the rules engine and pairing it with the generator that is passed to it when it is initialized. Internally, it creates
                    multiple rows of data based on a particular type, goes through the public properties on that type one by one and
                    finds the best rule matching that property's name and datatype. Then uses that rule to generate data to fill 
                    that property's value.
                </p>
                <p>Generally, the default method of seeding data is to use the .Seed() extension methods on IEnumerable in the
                   SeedPacket.Extensions namespace to seed data. The functionality of the SeedCore class has intentionally been kept
                   separate from the extension method logic in so that writing custom extension methods is trivial. 
                </p>
                <p> TIP: Customize your own .Seed() extension methods with your own defaults, rules, and customizations as in the 
                    example below. Now you can easily add your own rules and data, or even start over yours and data from scratch! 
                </p>
                @{ Html.RenderPartial("_02_SeedPacket"); }
                <strong>Constructor:</strong>
                <ul>
                    <li>
                        <h5>SeedCore (IGenerator generator = null)</h5>
                        <p>Some information...</p>
                    </li>
                </ul>
                <strong>Methods:</strong>
                <ul>
                    <li>
                        <h5>SeedList&lt;T&gt; (IEnumerable&lt;T&gt; iEnumerable, IGenerator generator = null) : returns IEnumerable&lt;T&gt;</h5>
                        <p>Some information...</p>
                    </li>
                </ul>
            </li>
            <li class="class">
                <h4>SimpleSeed class</h4>
                <p>
                    <strong>Purpose:</strong>
                    sdfsdfsssss
                </p>
                <strong>Constructor:</strong>
                <ul>
                    <li>
                        <h5>SimpleSeed(string sourcefilepath = null, string sourcestring = null, DataInputType seedinputtype = DataInputType.Auto)</h5>
                        <p>Some information...</p>
                    </li>
                </ul>
                <strong>Properties:</strong>
                <ul>
                    <li>
                        <h5>Default : string</h5>
                        <p>Some information...</p>
                    </li>
                    <li>
                        <h5>DefaultRandom:  Random</h5>
                        <p>Some information...</p>
                    </li>
                </ul>
                <strong>Methods:</strong>
                <ul>
                    <li>
                        <h5>Next(string identifier, int number, string ifNull = null) : returns string</h5>
                        <p>Some information...</p>
                    </li>
                    <li>
                        <h5>Randomize(string identifier, string ifNull = null) : returns string</h5>
                        <p>Some information...</p>
                    </li>
                </ul>
            </li>
            <li class="class">
                <h4>Rules class</h4>
                <p>
                    <strong>Purpose:</strong>
                    sdfsdfsssss
                </p>
                <strong>Implements:</strong>
                <ul>
                    <li>
                        <h5>Collection&lt;Rule&gt;</h5>
                    </li>
                    <li>
                        <h5>IRules</h5>
                    </li>
                </ul>
                <strong>Methods:</strong>
                <ul>
                    <li>
                        <h5>GetRuleByTypeAndName(Type propertyType, string propertyName) : returns Rule</h5>
                        <p>Some information...</p>
                    </li>
                    <li>
                        <h5>Add(Rule rule, bool overwrite = true): returns void</h5>
                        <p>Some information...</p>
                    </li>
                    <li>
                        <h5>AddRange(IEnumerable&lt;Rule&gt;rules, bool overwrite = true) : returns void</h5>
                        <p>Some information...</p>
                    </li>
                    <li>
                        <h5>RemoveRuleByName(string ruleName) : returns void</h5>
                        <p>Some information...</p>
                    </li>
                </ul>
            </li>
            <li class="class">
                <h4>Rule class</h4>
                <p>
                    <strong>Purpose:</strong>
                    sdfsdfsssss
                </p>
                <strong>Constructor:</strong>
                <ul>
                    <li>
                        <h5>Rule(Type typeMatch, string nameMatch, Func&lt;IGenerator, dynamic&gt; rule, string ruleName, string description = "")</h5>
                        <p>Some information...</p>
                    </li>
                </ul>
                <strong>Properties:</strong>
                <ul>
                    <li>
                        <h5>RuleName : returns string</h5>
                        <p>Some information...</p>
                    </li>
                    <li>
                        <h5>Description : returns string</h5>
                        <p>Some information...</p>
                    </li>
                </ul>
                <strong>Methods:</strong>
                <ul>
                    <li>
                        <h5>IsMatch (Type propType, string propName) : returns bool</h5>
                        <p>Some information...</p>
                    </li>
                    <li>
                        <h5>ApplyRule (IGenerator generator) : returns dynamic</h5>
                        <p>Some information...</p>
                    </li>
                </ul>
            </li>
            <li class="class">
                <h4>RuleExtensions static class</h4>
                <p>
                    <strong>Purpose:</strong>
                    sdfsdfsssss
                </p>
                <strong>Extension Methods:</strong>
                <ul>
                    <li>
                        <h5>static AddBasicRules (this Rules rules) : returns void</h5>
                        <p>Some information...</p>
                    </li>
                    <li>
                        <h5>static AddAdvancedRules (this Rules rules) : returns void</h5>
                        <p>Some information...</p>
                    </li>
                </ul>
            </li>
            <li class="class">
                <h4>RulesSet Enum</h4>
                <p>
                    <strong>Purpose:</strong>
                    sdfsdfsssss
                </p>
            </li>
            <li class="class">
                <h4>DataTypeInput Enum</h4>
                <p>
                    <strong>Purpose:</strong>
                    sdfsdfsssss
                </p>
            </li>
        </ul>
    </div>
</div>

<div class="row documentation">
    <div class="col-md-12">
        <h3>SeedPacket.Generators Namespace</h3>
        <ul class="namespaceList">
            <li class="class">
                <h4>Generator abstract class</h4>
                <p>
                    <strong>Purpose:</strong>
                    sdfsdfsssss
                </p>
                <strong>Implements:</strong>
                <ul>
                    <li>
                        <h5>IGenerator</h5>
                    </li>
                </ul>
                <strong>Properties:</strong>
                <ul>
                    <li>
                        <h5>SeedBegin : int</h5>
                        <p>Some information...</p>
                    </li>
                    <li>
                        <h5>SeedEnd : int</h5>
                        <p>Some information...</p>
                    </li>
                    <li>
                        <h5>Datasource : readOnly IDataSource</h5>
                        <p>Some information...</p>
                    </li>
                    <li>
                        <h5>Rules : Rules</h5>
                        <p>Some information...</p>
                    </li>
                    <li>
                        <h5>BaseRandom : Random</h5>
                        <p>Some information...</p>
                    </li>
                    <li>
                        <h5>BaseDateTime : DateTime</h5>
                        <p>Some information...</p>
                    </li>
                    <li>
                        <h5>Debugging : bool</h5>
                        <p>Some information...</p>
                    </li>
                    <li>
                        <h5>RowCount : readOnly int</h5>
                        <p>Some information...</p>
                    </li>
                    <li>
                        <h5>RowNumber : int</h5>
                        <p>Some information...</p>
                    </li>
                    <li>
                        <h5>RowRandom : readOnly Random</h5>
                        <p>Some information...</p>
                    </li>
                    <li>
                        <h5>RowRandomNumber : readOnly int</h5>
                        <p>Some information...</p>
                    </li>
                    <li>
                        <h5>CurrentRowValues : readOnly Dictionary&lt;string, object&gt;</h5>
                        <p>Some information...</p>
                    </li>
                    <li>
                        <h5>CurrentProperty : MetaProperty</h5>
                        <p>Some information...</p>
                    </li>
                </ul>
                <strong>Methods:</strong>
                <ul>
                    <li>
                        <h5>GetNextRowRandom : returns void</h5>
                        <p>Some information...</p>
                    </li>
                </ul>
            </li>
            <li class="class">
                <h4>BasicGenerator class</h4>
                <p>
                    <strong>Purpose:</strong>
                    sdfsdfsssss
                </p>
                <strong>Inherits:</strong>
                <ul>
                    <li>
                        <h5>Generator</h5>
                    </li>
                </ul>
                <strong>Implements:</strong>
                <ul>
                    <li>
                        <h5>IGenerator</h5>
                    </li>
                </ul>
            </li>
            <li class="class">
                <h4>MultiGenerator class</h4>
                <p>
                    <strong>Purpose:</strong>
                    sdfsdfsssss
                </p>
                <strong>Constructor:</strong>
                <ul>
                    <li>
                        <h5>MultiGenerator(string sourceFilepath = null, string sourceString = null,<br />
                                           DataInputType dataInputType = DataInputType.Auto,<br />
                                           RulesSet rulesSet = RulesSet.Advanced)</h5>
                        <p>Some information...</p>
                    </li>
                    <li>
                        <h5>MultiGenerator (IDataSource datasource, RulesSet rulesSet = RulesSet.Advanced)</h5>
                        <p>Some information...</p>
                    </li>
                </ul>
                <strong>Inherits:</strong>
                <ul>
                    <li>
                        <h5>Generator</h5>
                    </li>
                </ul>
                <strong>Implements:</strong>
                <ul>
                    <li>
                        <h5>IGenerator</h5>
                    </li>
                </ul>
                <strong>Methods:</strong>
                <ul>
                    <li>
                        <h5>GetRules (RulesSet ruleSet) : returns void</h5>
                        <p>Is virtual....</p>
                    </li>
                </ul>
            </li>
        </ul>
    </div>
</div>

<div class="row documentation">
    <div class="col-md-12">
        <h3>SeedPacket.DataSources Namespace</h3>
        <ul class="namespaceList">
            <li class="class">
                <h4>JsonDataSource class</h4>
                <p>
                    <strong>Purpose:</strong>
                    sdfsdfsssss
                </p>
                <strong>Implements:</strong>
                <ul>
                    <li>
                        <h5>IDataSource</h5>
                    </li>
                </ul>
                <strong>Methods:</strong>
                <ul>
                    <li>
                        <h5>Parse(string json) : returns void</h5>
                        <p>Some information...</p>
                    </li>
                    <li>
                        <h5>Load(string sourceFilePath) : returns void</h5>
                        <p>Some information...</p>
                    </li>
                    <li>
                        <h5>GetElementList(string identifier) : returns List&lt;string&gt;</h5>
                        <p>Some information...</p>
                    </li>
                </ul>
            </li>
            <li class="class">
                <h4>XmlDataSource class</h4>
                <p>
                    <strong>Purpose:</strong>
                    sdfsdfsssss
                </p>
                <strong>Implements:</strong>
                <ul>
                    <li>
                        <h5>IDataSource</h5>
                    </li>
                </ul>
                <strong>Methods:</strong>
                <ul>
                    <li>
                        <h5>Parse(string xml) : returns void</h5>
                        <p>Some information...</p>
                    </li>
                    <li>
                        <h5>Load(string sourceFilePath) : returns void</h5>
                        <p>Some information...</p>
                    </li>
                    <li>
                        <h5>LoadDefaultData() : returns void</h5>
                        <p>Some information...</p>
                    </li>
                    <li>
                        <h5>GetElementList(string identifier) : returns List&lt;string&gt;</h5>
                        <p>Some information...</p>
                    </li>
                </ul>
            </li>
            <li class="class">
                <h4>MultiDataSource class</h4>
                <p>
                    <strong>Purpose:</strong>
                    sdfsdfsssss
                </p>
                <strong>Implements:</strong>
                <ul>
                    <li>
                        <h5>IDataSource</h5>
                    </li>
                </ul>
                <strong>Constructors:</strong>
                <ul>
                    <li>
                        <h5>MultiDataSource(string sourcefilepath = null, string sourcestring = null, DataInputType datainputtype = DataInputType.Auto)</h5>
                        <p>Some information...</p>
                    </li>
                </ul>
                <strong>Methods:</strong>
                <ul>
                    <li>
                        <h5>GetElementList(string identifier) : returns List&lt;string&gt;</h5>
                        <p>Some information...</p>
                    </li>
                </ul>
            </li>
        </ul>
    </div>
</div>

<div class="row documentation">
    <div class="col-md-12">
        <h3>SeedPacket.Interfaces Namespace</h3>
        <ul class="namespaceList">
            <li class="class">
                <h4>IGenerator</h4>
                <p>
                    <strong>Purpose:</strong>
                    sdfsdfsssss
                </p>
                <strong>Members:</strong>
                <ul>
                    <li>
                        <h5>IRules Rules { get; }</h5>
                        <h5>int SeedBegin { get; set; }</h5>
                        <h5>int SeedEnd { get; set; }</h5>
                        <h5>Random BaseRandom { get; }</h5>
                        <h5>DateTime BaseDateTime { get; }</h5>
                        <h5>bool Debugging { get; set; }</h5>
                        <h5>dynamic Cache { get; set; }</h5>
                        <h5>IDataSource Datasource { get;  }</h5>
                        <h5>int RowNumber { get; set; }</h5>
                        <h5>int RowRandomNumber { get; }</h5>
                        <h5>Random RowRandom { get; }</h5>
                        <h5>int RowCount { get; }</h5>
                        <h5>Dictionary&lt;string, object&gt; CurrentRowValues { get; }</h5>
                        <h5>void GetNextRowRandom ()</h5>
                        <h5>MetaProperty CurrentProperty { get; set; }</h5>
                    </li>
                </ul>
            </li>
            <li class="class">
                <h4>IDataSource</h4>
                <p>
                    <strong>Purpose:</strong>
                    sdfsdfsssss
                </p>
                <strong>Members:</strong>
                <ul>
                    <li>
                        <h5>List&lt;string&gt; GetElementList(string identifier)</h5>
                    </li>
                </ul>
            </li>
            <li class="class">
                <h4>IRules</h4>
                <p>
                    <strong>Purpose:</strong>
                    sdfsdfsssss
                </p>
                <strong>Members:</strong>
                <ul>
                    <li>
                        <h5>Rule GetRuleByTypeAndName(Type ruleType, string propertyName)</h5>
                        <h5>void Add (Rule rule)</h5>
                        <h5>void AddRange (IEnumerable<Rule> rules, bool overwrite = false)</h5>
                        <h5>void RemoveRuleByName (string ruleName)</h5>
                        <h5>void Clear()</h5>
                    </li>
                </ul>
            </li>
        </ul>
    </div>
</div>

<div class="row documentation">
    <div class="col-md-12">
        <h3>SeedPacket.Functions Namespace</h3>
        <ul class="namespaceList">
            <li class="class">
                <h4>CacheExtensions (static)</h4>
                <strong>Extension Methods:</strong>
                <ul>
                    <li>
                        <h5>static TakeRandomItems&lt;T&gt; (this IList&lt;T&gt; sourceList, Random random, int count = 1, bool remove = true) : returns IList&lt;T&gt;</h5>
                        <p>where T : new() Some information...</p>
                    </li>
                    <li>
                        <h5>static T GetByItemName&lt;T&gt; (this ExpandoObject expando, string name) : returns T</h5>
                        <p>Some information...</p>
                    </li>
                    <li>
                        <h5>static Get&lt;TKey, TVal&gt; (this Dictionary&lt;TKey, TVal&gt; dictionary, TKey key, TVal defaultVal = default(TVal)) : returns TVal</h5>
                        <p>Some information...</p>
                    </li>
                </ul>
            </li>
            <li class="class">
                <h4>func (static)</h4>
                <p>
                    <strong>Purpose:</strong>
                    sdfsdfsssss
                </p>
                <strong>Methods:</strong>
                <ul>
                    <li>
                        <h5>static CacheItemsNext&lt;T&gt; (IGenerator generator, string cacheListName, int min, int max, bool remove = true) : returns List&lt;T&gt;</h5>
                        <p>Some information...</p>
                    </li>
                    <li>
                        <h5>static CacheItemsNext&lt;T&gt; (IGenerator generator, dynamic cacheList, int min, int max, bool remove = true) : returns List&lt;T&gt;</h5>
                        <p>Some information...</p>
                    </li>
                    <li>
                        <h5>static List&lt;T&gt; CacheItemsRandom&lt;T&gt; (IGenerator generator, string cacheListName, int min, int max, bool remove = true) : returns List&lt;T&gt;</h5>
                        <p>Some information...</p>
                    </li>
                    <li>
                        <h5>static List&lt;T&gt; CacheItemsRandom&lt;T&gt; (IGenerator generator, dynamic cacheList, int min, int max, bool remove = true) : returns List&lt;T&gt;</h5>
                        <p>Some information...</p>
                    </li>
                    <li>
                        <h5>static DiceRoll (IGenerator generator, int diceSides = 6, int numberOfDice = 1) : returns int</h5>
                        <p>Simulates rolling a 6-sided dice (16.6%). Use a higher diceSides to decrease chances in a linear progression.
                           Increasing numberOfDice creates a bell-curve of probability ie: 3d6 is 3 to 18 w/ 7 most likely possiblity.
                        </p>
                    </li>
                    <li>
                        <h5>static ElementNext (IGenerator generator, string identifier) : returns string</h5>
                        <p>Some information...</p>
                    </li>
                    <li>
                        <h5>static ElementRandom (IGenerator generator, string identifier = null) : returns string</h5>
                        <p>Some information...</p>
                    </li>
                    <li>
                        <h5>static ElementRandom (IGenerator generator, string identifier, TypeCode typeCode) : returns dynamic</h5>
                        <p>Some information...</p>
                    </li>
                    <li>
                        <h5>static OnceEvery (IGenerator generator, int count = 10) : returns bool</h5>
                        <p>Some information...</p>
                    </li>
                    <li>
                        <h5>static RandomAddress (IGenerator generator) : returns string</h5>
                        <p>Some information...</p>
                    </li>
                    <li>
                        <h5>static RandomCompany (IGenerator generator) : returns string</h5>
                        <p>Some information...</p>
                    </li>
                    <li>
                        <h5>static RandomCost (IGenerator generator) : returns decimal</h5>
                        <p>Some information...</p>
                    </li>
                    <li>
                        <h5>static RandomDateTime (IGenerator generator, int hoursBefore, int hoursAfter) : returns DateTime</h5>
                        <p>Some information...</p>
                    </li>
                    <li>
                        <h5>static RandomEmail (IGenerator generator) : returns string</h5>
                        <p>Some information...</p>
                    </li>
                    <li>
                        <h5>static RandomFee (IGenerator generator) : returns decimal</h5>
                        <p>Some information...</p>
                    </li>
                    <li>
                        <h5>static RandomGuid (IGenerator generator) : returns Guid</h5>
                        <p>Some information...</p>
                    </li>
                    <li>
                        <h5>static RandomPhone (IGenerator generator) : returns string</h5>
                        <p>Some information...</p>
                    </li>
                    <li>
                        <h5>static RandomUserName (IGenerator generator) : returns string</h5>
                        <p>Some information...</p>
                    </li>
                    <li>
                        <h5>static RandomZip (IGenerator generator) : returns string</h5>
                        <p>Some information...</p>
                    </li>
                </ul>
            </li>
        </ul>
    </div>
</div>

<div class="row documentation">
    <div class="col-md-12">
        <h3>SeedPacket.Exceptions Namespace</h3>
        <ul class="namespaceList">
            <li class="class">
                <h4>InvalidDefaultDataException class</h4>
                Message: Not able to retrieve valid default data from the embedded resource file.
                <strong>Inherits:</strong>
                <ul>
                    <li>
                        <h5>Exception</h5>
                    </li>
                </ul>
            </li>
            <li class="class">
                <h4>InvalidSeedParametersException class</h4>
                Message: Invalid Parameters: SeedBegin must be less than or equal to SeedEnd.
                <strong>Inherits:</strong>
                <ul>
                    <li>
                        <h5>Exception</h5>
                    </li>
                </ul>
            </li>
            <li class="class">
                <h4>InvalidSourceFileException class</h4>
                Message: Not able to retrieve valid {source} data from the supplied file path ("{filepath}").
                <strong>Inherits:</strong>
                <ul>
                    <li>
                        <h5>Exception</h5>
                    </li>
                </ul>
            </li>
            <li class="class">
                <h4>InvalidSourceStringException</h4>
                Message: Not able to retrieve valid {source}data from the supplied source string.
                <strong>Inherits:</strong>
                <ul>
                    <li>
                        <h5>Exception</h5>
                    </li>
                </ul>
            </li>
            <li class="class">
                <h4>MultipleSourceException class</h4>
               Message: You can only define one source, either the path to a file OR explicitly pass in a string.
                <strong>Inherits:</strong>
                <ul>
                    <li>
                        <h5>Exception</h5>
                    </li>
                </ul>
            </li>
            <li class="class">
                <h4>NoSourceException class</h4>
                Message: You MUST either define the path to a source file OR explicitly pass in a string.
                <strong>Inherits:</strong>
                <ul>
                    <li>
                        <h5>Exception</h5>
                    </li>
                </ul>
            </li>
        </ul>
    </div>
</div>

<div class="row documentation">
    <div class="col-md-12">
        <h3>Debugging</h3>
        Information to come
    </div>
</div>
