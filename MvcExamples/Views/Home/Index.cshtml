
<div class="row">
    <div class="col-md-12">
        <img class="pull-right" style="margin-top: 20px;" src="~/Content/Images/SeedPacketImage.png" alt="SeedPacket Illustration" />
        <h2>SeedPacket</h2>
        <p>Created by Will Crowther</p>
        <h3>Overview</h3>
        <p>
            SeedPacket is for the quick seeding of data on a List (or most types that implement IEnumerable) that
            works well with LINQ. It is easy to use, out of the box, for prototyping, data generation, and unit testing.
            The customizable and powerful rules engine can pull data from an external source such as an Xml/Json file or string.
        </p>
        <h3>How It Works</h3>
        <p>
            SeedPacket <b>adds a .seed() extension method</b> onto IEnumerable so that you create a list of elements very easily. 
            The rules engine keys off the datatype or interface, and name of an item's properties so that the data is appropriate to that type.
            That is to say, "out-of-the-box" email properties will be filled with valid emails, phone numbers filled with phone numbers,
            and names are names etc. By default, the rules engine loads up about 30 rules for common situations and will degrade to more generic 
            rules if necessary. If you need to modify the default generated data, the rules are simple to create and modify,
            and come with a many examples, including a data generator that pulls from an external source. The randomly generated data
            can be set to always be static accross requests or to be random on each time.
        </p>
    </div>
    <div class="col-md-8">
        <div class="hotBox">
            Install SeedPacket using the <b>Nuget Package Manager</b> in Visual Studio.<br />
            From the Package Manager Console type: <b>PM> Install-Package SeedPacket</b><br />
            For more details: <b><a href="https://www.nuget.org/packages/SeedPacket/0.9.9">https://www.nuget.org/packages/SeedPacket/0.9.9</a></b>  
        </div>
    </div>
</div>

<div class="row">
    <div class="col-md-6">
        <h3>Simple Examples</h3>
        <p>
            Creating seed data is as simple as importing SeedPacket from Nuget, adding the SeedPacket.Extensions namespace, and calling .Seed()
            on an existing an IEnumerable such as List, etc. The <b>table on the right</b> was generated the code in the second example below.
        </p>
        @{ Html.RenderPartial("_Example_SimpleExample"); }
        <div class="randomSeed">
            Seed<input id="randomSeed" type="text" value="1234" maxlength="4" style="width:44px; text-align: center;" />
        </div>
        <div class="rowCounter">
            Rows<input id="numberOfRowResults" type="text" value="20" maxlength="4" style="width:44px; text-align: center;" />
        </div>
        <p>
            You can change the number of rows generated by changing the number to the right and the page will use javascript to fetch a new list of users
            generated on the server. Note that even though the seed records are "randomly" generated, the list begins with the same results on subsequent
            iterations. This is because we are passing in the same random "seed" integer by default but this value can be changed. You will see how this 
            can be easily customized when we update what data is generated with some custom rules in the Rules engine. The base data is taken from an
            embedded datasource, which can be easily overridden with an external XML / Json string or file. 
        </p>

        <p>NEEDS WORK STILL
            Notice how the seed data generated are well-formed usernames and email addresses. The default rules finds that the property type is a "string"
            and property contains "email" and "username" and generates the appropriate data, including generating the username from the firstname and lastname.
            Other data types such as the DateTime "Created" or an Int Id are also be created. The rules match first on data-type, then on match on property name 
            with a last-added prioritization. What happens when you have a field name and/or datatype is not that common? Generally, the basic rules will catch 
            common patterns and use a simple pattern such as the default of Property Name + the RowNumber for string. If there is not even a basic rule 
            for a particular match, generally the type default is returned. 
        </p>
        <p>
            <b>Of course, the real flexibility comes from being able to add your own custom rules easily. </b>We will get to that in the next section,
            but lets first look at a more advanced example.
        </p>
    </div>
    <div class="col-md-6">
        @{ Html.RenderPartial("_Result_SimpleExample"); }
        @{ Html.RenderPartial("_HotBox"); }
    </div>
</div>

<div class="row">
    <div class="col-md-12">
        <h3>Advanced Example</h3>
        <p>NEEDS WORK STILL
            For more advanced situations, you can pass in a generator class that contains a customizable rules engine.  By default,  the "Advanced" ruleset is
            used which contains about thirty common rules and the data is loaded from an internal resource. 
            
            In the example below a "MultiGenerator" is injected into the Seed method. We are adding five new rules to modify how the data is created. In this 
            example, the first added rule applies to the DateTime type "Created" field to create dates in the last 30 days. The second rule applies to the 
            "ItemName" field and overrides a rule that gets random (fake) products and replaces it with one that gets the next item in the sequence. This
            insures the values will all be unique, assuming that the number in the list is less than the number in the source list. The third rule, randomly 
            picks a selected value for the dropdown.

            The last custom rule is the most interesting and makes sure that any List<Item> fields are filled from a generated list that has been saved in 
            the generator's Cache. We populate this generated list from another .Seed call. Note that the cached list is filled with before the rule is envoked. 
            If .
        </p>
        @{ Html.RenderPartial("_Example_AdvancedExample"); }
        @{ Html.RenderPartial("_Result_AdvancedExample"); }
    </div>
</div>

<div class="row">
    <div class="col-md-12">
        <a class="nextpage pull-right" href="/RulesEngine">
            Rules Engine <span class="glyphicon glyphicon-triangle-right" aria-hidden="true"></span>
        </a>
    </div>
</div>

<script language="javascript" type="text/javascript">
    $(document).ready(function () {
        seedExamples.init();
    });
</script>



