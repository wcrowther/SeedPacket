
<div class="row">
    <div class="col-md-12">
        <img class="pull-right" src="/Content/Images/SeedPacket%20shadows.png" alt="SeedPacket Illustration" />
        <h2>SeedPacket</h2>
        <p>Created by Will Crowther</p>
        <h3>Overview</h3>
        <p>
            SeedPacket is for the quick seeding of data on a List (or most types that implement IEnumerable). 
            It is easy to use out of the box for prototyping, data generation, and unit testing. It customizable
            with a powerful rules engine that can pull data from an external source such as an Xml file or string.
        </p>
        <h3>How It Works</h3>
        <p>
            SeedPacket adds a .seed() extension method onto IEnumerable so that you create a list of elements very easily. 
            The rules engine keys off the datatype or interface, and name of an item's properties so that the data is appropriate to the type.
            That is to say, "out-of-the-box" - email properties will be filled with valid emails, phone numbers filled with phone numbers,
            and names are names etc. By default, the rules engine loads up about 30 rules for common situations and will degrade to more generic 
            rules necessary. If you need to modify the default generated data, the rules are simple to create and modify,
            and come with a many examples, including a data generator that pulls from an xml file. The randomly generated data can be
            set to always be static or to be random on each request.
        </p>
    </div>
    <div class="col-md-8">
        <div class="hotBox">
            Install SeedPacket using the <b>Nuget Package Manager</b> in Visual Studio.<br />
            From the Package Manager Console type: <b>PM> Install-Package SeedPacket</b><br />
            For more details: <b><a href="https://www.nuget.org/packages/SeedPacket/0.9.9">https://www.nuget.org/packages/SeedPacket/0.9.9</a></b>  
        </div>
    </div>
</div>

<div class="row">
    <div class="col-md-6">
        <h3>Simple Examples</h3>
        <p>
            Creating seed data is as simple as importing SeedPacket from Nuget, adding the SeedPacket namespace, and calling .Seed()
            on an existing an IEnumerable such as List, etc. The <b>table on the right</b> was generated the code int he second example below.
        </p>
        @{ Html.RenderPartial("_Code_SimpleExample"); }
        <div class="randomSeed">
            Seed<input id="randomSeed" type="text" value="1234" maxlength="4" style="width:44px; text-align: center;" />
        </div>
        <div class="rowCounter">
            Rows<input id="numberOfRowResults" type="text" value="15" maxlength="4" style="width:44px; text-align: center;" />
        </div>
        <p>
            You can change the number of rows generated by changing the number to the right and the page will use javascript to fetch a new list of users
            generated on the server. Note that even though the seed records are "randomly" generated, the list begins with the same results on subsequent
            iterations. This is because we are passing in the same random "seed" integer by default but this value can be changed. You will see how this is customizable when we look at the BaseRandom property of the Rules Engine.
        </p>

        <p>
            Notice how the seed data generated are well-formed usernames and email addresses. The default rules look that the property type is "string"
            and property contains "email" and "username" and generates the appropriate data, including generating the username from the firstname and lastname.
            Other data types such as the DateTime "Created" or an Int Id are also be created. What happens when you have a field name and/or datatype
            is not that common? Generally, the basic rules will catch common patterns and use a simple pattern such as the default of Property Name + the RowNumber for string.
            If there is not even a basic rule for a particular match, generally the type default is returned. 
        </p>
        <p>
            <b>Of course, the real flexibility comes from being able to add your own custom rules easily. </b>We will get to that in the next section,
            but lets first look at a more advanced example.
        </p>
    </div>
    <div class="col-md-6" id="rowResults">
        @{ Html.RenderPartial("_Result_SimpleExample"); }
        <div class="hotBox topSpace">
            <b>When to use SeedPacket?</b>
            <p>You will find that SeedPacket is the most useful when you are in the initial stages of a project and want to rapidly change the structure
               of data classes without actually having to worry about the data contained in thoses classes.
            </p>
        </div>
    </div>
</div>

<div class="row">
    <div class="col-md-12">
        <h3>Advanced Example</h3>
        <p>
            For more advanced situations, you can pass in a rules engine that gives great customizability. "GenRules" is a collection of rules
            that get applied to each property on each class that is being seeded. The rules match first on data-type, then on match on property name
            with a last-added prioritization. By default, GenRules loads the "Advanced" ruleset which contains about thirty common rules.
        </p>
        @{ Html.RenderPartial("_Code_AdvancedExample"); }
        @{ Html.RenderPartial("_Result_AdvancedExample"); }
    </div>
</div>

<div class="row">
    <div class="col-md-12">
        <a class="nextpage pull-right" href="/RulesEngine">
            Rules Engine <span class="glyphicon glyphicon-triangle-right" aria-hidden="true"></span>
        </a>
    </div>
</div>

<script language="javascript" type="text/javascript">
    $(document).ready(function () {
        seedExamples.init();
    });
</script>



