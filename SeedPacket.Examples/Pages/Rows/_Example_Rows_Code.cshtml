
<div class="codeExample top-margin">
<label class="codeLabelBlue">CODE:</label>

<div class="codeTitle codeTitleBlue">The code to generate all the invoices in GetAccounts</div>

<code class="side-scroll">
private List<Account> GetAccounts(int rowCount)
{
    var baseRandom = new Random(2342789);
    int baseAccountId = 3464, baseInvoiceId = 12799, baseItemId = 1098887;

    <i>// Imports a modified XML document with and additional 'Description' XML list</i>
    var generator = new MultiGenerator(xmlSeedSourcePlusPath, baseRandom: baseRandom)
    {
        Rules =
        {
            new Rule(typeof(int), "AccountId",      g => baseAccountId + g.RowNumber, "AccountId"  ),
            new Rule(typeof(DateTime), "Create%",   g => g.BaseDateTime.AddDays (g.RowRandom.Next(-30, 1)), "DateTimeInLastMonth"  ),
            new Rule(typeof(string),"Description%", g => Funcs.GetElementRandom(g, "Description"), "Description", "Gets Description from custom XML file" ),
            new Rule(typeof(List&lt;InvoiceItem&gt;), "", g => Funcs.GetListFromCacheNext<InvoiceItem>(g, "InvoiceItems", 1, 8), "getInvoiceItems"),
            new Rule(typeof(List&lt;Invoice&gt;), "",     g => Funcs.GetListFromCacheNext<Invoice>(g, "Invoices", 0, 5)
        }
    };
    generator.Cache.InvoiceItems = new List<InvoiceItem>().Seed(baseItemId, baseItemId + (rowCount * 20), generator);
    generator.Cache.Invoices     = new List<Invoice>().Seed(baseInvoiceId, baseInvoiceId + (rowCount * 4), generator);

    return new List<Account>().Seed(1, rowCount, generator).ToList();
}
</code>
</div>
