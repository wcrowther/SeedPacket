@page   "/"
@model IndexModel

@{
    ViewData["Title"] = "Home";
}

<div class="row">
    <div class="col-md-12">

		<img class="pull-right" style="margin: 20px 0 20px 10px; height: 300px;" src="~/images/SeedPacketImage.png" alt="SeedPacket Illustration" />

        <h2>SeedPacket</h2>
		<h4 class="byline">Lightning-Fast LINQ Data Generation for .NET</h4><br/>
        <h3>Overview</h3>
        <p>
			SeedPacket quickly seeds data in .NET for mockups, RAD, testing, prototyping, and database seeding. Written in C#, 
			it features an easy-to-use, customizable rules engine that supports external data sources like XML, JSON, or strings.
        </p>
        <h3>How It Works</h3>
        <p>
			SeedPacket extends IEnumerable with a .seed() method, similar to LINQ, to populate lists with fully formed elements. 
			The rules engine uses data types, interfaces, and property names to generate relevant data—emails for email fields, 
			phone numbers for phone fields, and so on.
        </p>
        <p>
			By default, it applies 30+ common rules and falls back to generic ones if needed. Custom rules are easy to create and 
			modify, with examples provided, including integration with external data sources. Generated data can be static across 
			requests or randomized each time.
        </p>
	</div>
</div>

<div class="row">

	<div class="col-md-6 bottom-margin">
        <h3>Simple Examples</h3>
        <p>
            Creating seed data is as simple as importing SeedPacket from Nuget, adding the SeedPacket.Extensions namespace, and calling .Seed()
            on an existing an IEnumerable such as List, etc. The <b>table on the right</b> was generated the code in the second example below.
        </p>

        <partial name="_Example_Simple_Code" />

        <div class="randomSeed">
            Seed<input id="randomSeed" type="text" value="1234" maxlength="4" style="width:60px; text-align: center;" />
        </div>
        <div class="rowCounter">
            Rows<input id="numberOfRowResults" type="text" value="20" maxlength="4" style="width:60px; text-align: center;" />
        </div>
		<p class="highlight">
			<b>You can adjust the number of generated rows by changing the "Rows" input, which triggers JavaScript to fetch new data from SeedPacket 
			on the server.</b>
		</p>
		<p class="margin-top">
			<b>			
			Although the data appears random, using the same "seed" value ensures consistent results. Change the "Seed" number input
			to see how it always produces the same output for that seed value.
			</b>
		</p>
        <p>
			Customization is simple—SeedPacket’s rules engine can modify generated data using custom rules. The base data comes from an embedded 
			source but can be overridden with an external XML/JSON file or string.
        </p>
        <p>
			By default, well-formed usernames and emails are generated based on property types and names. For example, if a property is a string 
			containing "email" or "username," it generates appropriate data, even constructing usernames from first and last names. Other types, 
			like DateTime (e.g., "Created") or int (e.g., "Id"), are also handled. Rules prioritize matches by data type first, then property name.
        </p>
        <p>
			For uncommon fields, basic rules apply, such as using PropertyName + RowNumber for strings. If no match is found, a type default is used.
        </p>
        <p>
			<b>The real power lies in custom rules, which we'll explore next—first, let’s look at a more advanced example.</b>
        </p>

		<partial name="_Source_Code" />

    </div>

    <div class="col-md-6">

		<partial name="_HotBox" />

        <div class="code-scrolls-div top-margin"> 
            <span class="code-scrolls-span">&#8592 Table Scrolls &#8594</span>
        </div>

        <partial name="_Result_Simple" model="Model.UserList" />
    </div>
</div>

<div class="row">
    <div class="col-md-12">

        <partial name="_Example_Advanced_Code" />

        <h3>Advanced Example</h3>
		<div class="bottom-margin">
			For more advanced situations, you can pass in a generator class that contains a customizable rules engine.  By default,  the "Advanced" ruleset is
			used which contains about thirty common rules and the data is loaded from an internal resource. In the example below a "MultiGenerator" is injected
			into the Seed method. 
		</div>

		<div class="bottom-margin">
			 We are adding five new rules to modify how the data is created:
		</div>

		<ol class="bottom-margin">
			<li>
				The first rule applies to the "ItemName" field uses a built-in seedpacket function (Func) that gets the next element from the datasource list
				"ProductName". It actually overrides a rule that gets random (fake) products and replaces it with one that gets the next item in the sequence.
				This insures the values will all be unique, if the number of items requested is less than in the source.
			</li>
			<li>
				The second rule, randomly picks a selected value for the dropdown from 0 to 10 (the C# Random() method picks values <i>less than</i> the max value).
			</li>
			<li>
				The third rule, randomly picks a first and last name for any string fields matching "CEO"
			</li>
			<li>
				The fourth rule, matches any string starting with "Description" and gets a random value from the datasoure called "Description". This is not in the
				default lists that are "built-in" in SeedPacket. In the constructor for the MultiGenerator, you will see that we are now passing in a custom xml file
				that has all the source data for our lists. Now we have complete control of our source data and Funcs.RandomElement() can pull from any named element.
			</li>
			<li>
				The fifth custom rule is the most interesting and makes sure that any List&lt;Item&gt; fields are filled from a generated list that has been saved in
				the generator's Cache. We can populate this generated list from another .Seed call and this allows us to have complex, hierarchical data when needed.
				Note how we can initially declare the rules, but then need to make sure we fill the cached data before the rules are actually run.
			</li>
		</ol>

		<div class="bottom-margin">
			Notice how we set <b>BaseDateTime</b> as the starting point for all generated DateTime values. Similarly, <b>BaseRandom</b> serves as the root of the "Random Tree," 
			influencing all other random values like <b>RowRandom</b>.
		</div>

        <partial name="_Result_Advanced" />

    </div>
</div>

<div class="row">
    <div class="col-md-12">
        <a class="nextpage pull-right" href="/Rules">
            Rules<span class="glyphicon glyphicon-triangle-right" aria-hidden="true"></span>
        </a>
    </div>
</div>

@section scripts
{
    <script src="~/js/SeedExamples.js" type="text/javascript" asp-append-version="true"></script>
    <script language="javascript" type="text/javascript">

        $(document).ready(function () {
            seedExamples.init();
        });
    </script>
}

