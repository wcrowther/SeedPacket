<div class="codeExample top-margin">

<label class="codeLabelBlue">CODE:</label>

<div class="codeTitle codeTitleBlue">
    Import the main <b>SeedPacket</b> namespace and not
    the <b>SeedPacket.Extensions</b> to avoid conflicts with your own new custom extension methods.
</div>

<code class="side-scroll">
using SeedPacket;
using SeedPacket.Functions;
using SeedPacket.Generators;
using System;
using System.Collections.Generic;
using System.Linq;
using static SeedPacket.Examples.Helpers.Common;

namespace {YourNamespace}.Extensions
{
    <i>// See source of SeedPacket.Examples/Logic/Extensions/CustomSeedExtensions.cs for code.</i>
    public static class CustomSeedExtensions
    {
        private static int defaultSeed = 34567;
        private static readonly string sourcePath = $@@"{GetApplicationRoot()}\Logic\SourceFiles\xmlSeedSourcePlus.xml";

        <i>// Simplified and streamlined version of SeedPacket.Seed() extension</i>
        public static List&lt;T&gt; Seed&lt;T&gt;(  this IEnumerable&lt;T&gt; iEnumerable,
                                                    int? seedEnd = null, int? seedBegin = null,
                                                    int? randomSeed = null, string customPropertyName = null )
        {
            var gen = CustomGenerator(sourcePath, seedEnd, seedBegin, randomSeed, customPropertyName);

            return new SeedCore(gen).SeedList(iEnumerable).ToList();
        }

        <i>// Remove and simplify if you are not going to use need a Dictionary implementation</i>
        public static IDictionary&lt;TKey, TValue> Seed&lt;TKey, TValue&gt; 
                                    ( this IDictionary&lt;TKey, TValue&gt; iDictionary, 
                                      int? seedEnd = null, int? seedBegin = null, 
                                      int? randomSeed = null, string customPropertyName = null )
        {
            var gen = CustomGenerator(sourcePath, seedEnd, seedBegin, randomSeed, customPropertyName);

            return new SeedCore(gen).SeedList(iDictionary);
        }

        <i>// Set common defaults here</i>
        private static CustomGenerator CustomGenerator( string xmlSourcePath, 
                                                        int? seedEnd, int? seedBegin, 
                                                        int? randomSeed, string customPropertyName)
        {
            return new CustomGenerator(xmlSourcePath, dataInputType: DataInputType.XmlFile)
            {
                SeedBegin       = seedBegin ?? 1,
                SeedEnd         = seedEnd ?? 10,
                BaseRandom      = new Random(randomSeed ?? defaultSeed),
                BaseDateTime    = DateTime.Now,
                CustomName      = customPropertyName
            };
        }
     }
}
</code>
</div>


