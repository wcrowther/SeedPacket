<div class="codeExample topSpace">
<label class="codeLabelBlue">CODE:</label>
<div class="codeTitle codeTitleBlue">
    Import the main <b>SeedPacket</b> namespace and not
    the <b>SeedPacket.Extensions</b> to avoid conflicts with your own new custom extension methods.
</div>

<code>
using SeedPacket;
using SeedPacket.Functions;
using SeedPacket.Generators;
using System;
using System.Collections.Generic;
using System.Linq;

namespace {YourNamespace}.Extensions
{
    public static class CustomSeedExtensions
    {
        private static int defaultSeed = 3456;

        <i>// Simplified and streamlined version of SeedPacket.Seed() extension</i>
        public static List&lt;T&gt; Seed&lt;T&gt;( this IEnumerable&lt;T&gt; iEnumerable, int? seedEnd = null,
                                      int? seedBegin = null, int? randomSeed = null,
                                      string propertyName = null )
        {
            var gen = new MultiGenerator("~/SourceFiles/xmlSeedSourcePlus.xml", dataInputType: DataInputType.XmlFile)
            {
                SeedBegin = seedBegin ?? 1,
                SeedEnd = seedEnd ?? 10,
                BaseRandom = new Random(randomSeed ?? defaultSeed),
                BaseDateTime = DateTime.Now,
                CurrentPropertyName = propertyName
            };
            return new SeedCore(gen).SeedList(iEnumerable).ToList();
        }

        <i>// Remove and simplify if you are not going to use need a Dictionary implementation</i>
        public static IDictionary&lt;TKey, TValue> Seed&lt;TKey, TValue&gt; ( this IDictionary&lt;TKey, TValue&gt; iDictionary, 
                                                                     int? seedEnd = null, int? seedBegin = null, 
                                                                     int? randomSeed = null, string propertyName = null )
        {
            var gen = new MultiGenerator("~/SourceFiles/xmlSeedSourcePlus.xml", dataInputType: DataInputType.XmlFile)
            {
                SeedBegin = seedBegin ?? 1,
                SeedEnd = seedEnd ?? 10,
                BaseRandom = new Random(randomSeed ?? defaultSeed),
                BaseDateTime = DateTime.Now,
                CurrentPropertyName = propertyName
            };
            return new SeedCore(gen).SeedList(iDictionary);
        }

        <i>// Example of a custom method that only returns one instance of &lt;T&gt; instead of a list</i>
        public static T SeedOne&lt;T&gt;  (this T type, int? randomSeed = null) where T : new()
        {
            return new List&lt;T&gt; ().Seed(seedEnd: 1, randomSeed: randomSeed).Single();
         }
     }
}
</code>
</div>


